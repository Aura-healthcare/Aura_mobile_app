/**
 * @file
 * @author  clecoued <clement.lecouedic@aura.healthcare>
 * @version 1.0
 *
 *
 * @section LICENSE
 *
 * Aura Mobile Application
 * Copyright (C) 2017 Aura Healthcare
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 *
 * @section DESCRIPTION
 * RemeteDataDynamoDBRepository is a remote data storage relying on Amazon DynamoDB database and
 * Amazon Mobile SDK(API) <https://aws.amazon.com/mobile/sdk/>.
 * This framework saves data in a NoSql database with a multiple tables architecture
 *
 * We consider a three-step initialization:
 *  1) initialize database objects
 *  2) connect to DynamoDB database
 * Currently secured connection to database is done using Amazon Cognito User Pool credentials.
 *  3 .. N) query or save data in database
 */

package com.wearablesensor.aura.data_repository;

import android.content.Context;
import android.util.Log;

import com.amazonaws.auth.CognitoCachingCredentialsProvider;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapper;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBQueryExpression;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.PaginatedQueryList;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.cognitoidentity.model.NotAuthorizedException;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.wearablesensor.aura.authentification.AmazonCognitoAuthentificationHelper;
import com.wearablesensor.aura.data_repository.models.PhysioSignalModel;
import com.wearablesensor.aura.data_repository.models.SeizureEventModel;
import com.wearablesensor.aura.user_session.UserModel;
import com.wearablesensor.aura.user_session.UserPreferencesModel;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class RemoteDataDynamoDBRepository implements RemoteDataRepository.Session{
    private final String TAG = this.getClass().getSimpleName();

    /**
     * @brief constructor
     *
     * @param iApplicationContext Aura application context
     */

    public RemoteDataDynamoDBRepository(Context iApplicationContext){
        Log.d(TAG, "RemoteData DynamoDB repository init");
    }

    /**
     * @brief initialize connection between remote database and Aura application
     *
     * @param lAuthToken authentification token generated by identity provider
     * @throws Exception
     */

    public void connect(String lAuthToken) throws Exception{

        Log.d(TAG, "MyToken - " + lAuthToken);

    }

    /**
     * @param iPhysioSignalSamples list of physiological signal samples to be saved
     *
     * @throws Exception
     *
     * @brief save a list of physiological signal samples
     */

    public void savePhysioSignalSamples(final ArrayList<PhysioSignalModel> iPhysioSignalSamples) throws Exception {
        Log.d(TAG, "save Physio Signal Samples: " + iPhysioSignalSamples.size());

    }
    /**
     * @brief save a list of seizure event samples
     *
     * @param iSensitiveEvents list of seizure event samples
     *
     * @throws Exception
     */


    public void saveSeizures(final ArrayList<SeizureEventModel> iSensitiveEvents) throws Exception {
        Log.d(TAG, "save Seizure event: " + iSensitiveEvents.size());


    }

    /**
     *
     * @brief query a user following authentification
     *
     * @param iAmazonId amazon cognito username
     *
     * @return
     * @throws Exception
     */
    @Override
    public UserModel queryUser(String iAmazonId) throws Exception{

        UserModel lUserModel = new UserModel();
        lUserModel.setAlias("QQQ");
        lUserModel.setUuid(UUID.randomUUID().toString());
        lUserModel.setAmazonId(iAmazonId);

        return lUserModel;
    }

    /**
     * @brief save a newly created user with information related to Authentification provider
     *
     * @param iUserModel user information related to Authentification
     *
     * @throws Exception
     */
    @Override
    public void saveUser(final UserModel iUserModel) throws Exception {

    }

    /**
     * @brief query user preferences for a single user
     *
     * @param iUserId selected user UUID
     *
     * @return
     */
    @Override
    public UserPreferencesModel queryUserPreferences(String iUserId) {
        UserPreferencesModel lUserPrefsModel = new UserPreferencesModel();
        lUserPrefsModel.setUserId(iUserId);
        lUserPrefsModel.setLastSync("tomorrow");
        return lUserPrefsModel;
    }

    /**
     * @brief save user preferences for a single user
     *
     * @param iUserPreferencesModel user preferences to be saved
     *
     * @throws Exception
     */
    @Override
    public void saveUserPreferences(final UserPreferencesModel iUserPreferencesModel) throws Exception {

    }
}
